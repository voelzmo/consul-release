#!/bin/bash -exu

export CONSUL_RELEASE_VERSION="99999+dev.$(date +%s)"
# export LATEST_CONSUL_RELEASE_VERSION="$(curl http://bosh.io/api/v1/releases/github.com/cloudfoundry-incubator/consul-release | jq -r .[0].version)"

turbulence_version="0.8"

function check_dependencies() {
  test -n "${CONSATS_CONFIG?"CONSATS_CONFIG is a required environment variable"}"
  if [[ ! -f "${CONSATS_CONFIG}" ]]; then
    echo "Could not locate CONSATS_CONFIG file at ${CONSATS_CONFIG}"
    exit 1
  fi

  require jq
  require bosh
  require go
  require wget
}

function require() {
  local dependency
  dependency="${1}"

  if [[ -z "$(which "${dependency}")" ]]; then
    echo "This test runner requires '${dependency}'"
    exit 1
  fi
}

function main() {
  parse_config

  local scripts_dir
  scripts_dir=$(cd "$(dirname "${0}")" && pwd)

  upload_releases "${scripts_dir}"
  force_compilation "${scripts_dir}"
  # if [[ "${1}" = "turbulence" ]]; then "lol turbulence"
  #   bash -c "${scripts_dir}/../src/acceptance-tests/scripts/test -nodes ${PARALLEL_NODES} $@"
  # else
  bash -c "${scripts_dir}/../src/acceptance-tests/scripts/test -skipPackage turbulence -nodes ${PARALLEL_NODES} $@"
  # fi
}

function parse_config() {
  set +x
  export BOSH_DIRECTOR="$(jq --raw-output '.bosh.target' "${CONSATS_CONFIG}")"
  export BOSH_CLIENT="$(jq --raw-output '.bosh.username' "${CONSATS_CONFIG}")"
  export BOSH_CLIENT_SECRET="$(jq --raw-output '.bosh.password' "${CONSATS_CONFIG}")"
  export PARALLEL_NODES="$(jq --raw-output 'if .bosh.parallel_nodes == null then 1 else .bosh.parallel_nodes end' "${CONSATS_CONFIG}")"
  set -x
}

function upload_releases() {
  local scripts_dir
  scripts_dir="${1}"

  pushd "${scripts_dir}/.." > /dev/null
    bosh create-release --force --version "${CONSUL_RELEASE_VERSION}"
    bosh upload-release
  popd > /dev/null

  local releases_dir
  releases_dir="/tmp/consats/releases"
  mkdir -p "${releases_dir}"

  wget -nc -O "${releases_dir}/turbulence-release-${turbulence_version}.tgz" "http://bosh.io/d/github.com/cppforlife/turbulence-release?v=${turbulence_version}" || echo "File Exists"
  bosh upload-release "${releases_dir}/turbulence-release-${turbulence_version}.tgz"

# this should not be necessary, we're testing the local release uploaded above, not the recent final release.
  # wget -nc -O "${releases_dir}/consul-release-${LATEST_CONSUL_RELEASE_VERSION}.tgz" "http://bosh.io/d/github.com/cloudfoundry-incubator/consul-release?v=${LATEST_CONSUL_RELEASE_VERSION}" || echo "File Exists"
  # bosh upload-release "${releases_dir}/consul-release-${LATEST_CONSUL_RELEASE_VERSION}.tgz"
}

function force_compilation() {
  local scripts_dir
  scripts_dir="${1}"

  set +x
  local stemcell_version
  stemcell_version=$(bosh stemcells --json | jq -r .Tables[0].Rows[0].version | sed s/*//)
  set -x

  pushd /tmp > /dev/null
    cp "${scripts_dir}/fixtures/consul_compilation.yml" "consul_compilation.yml"

    if [[ -n $(bosh cloud-config) ]]; then
      echo "cloud config exists...skipping update cloud-config"
    else
      echo "this test requires a cloud-config uploaded"
      exit 1
    fi

    bosh -d compilation -n deploy "consul_compilation.yml"
    bosh -d compilation export-release "consul/${CONSUL_RELEASE_VERSION}" "ubuntu-xenial/${stemcell_version}"
    bosh -d compilation export-release "turbulence/${turbulence_version}" "ubuntu-xenial/${stemcell_version}"
    bosh -d compilation -n delete-deployment
  popd > /dev/null
}

function cleanup_releases() {
  set +e
  bosh -n delete-release turbulence/"${turbulence_version}"
  # bosh -n delete-release consul/"${LATEST_CONSUL_RELEASE_VERSION}"
  bosh -n delete-release consul/"${CONSUL_RELEASE_VERSION}"
  set -e
}

check_dependencies
trap cleanup_releases EXIT
main "$@"
